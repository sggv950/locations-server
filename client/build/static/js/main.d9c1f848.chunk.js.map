{"version":3,"sources":["components/header/Header.tsx","store/hooks.ts","components/location-additional-info/LocationAdditionalInfo.tsx","components/map-component/MapComponent.tsx","components/location-details/LocationDetails.tsx","api/locations-service.ts","store/actions.ts","components/location-item/LocationItem.tsx","components/location-list/LocationList.tsx","components/location-search/LocationSearch.tsx","components/menu-button/MenuButton.tsx","App.tsx","reportWebVitals.ts","utils/util.ts","store/reducer.ts","store/store.ts","index.tsx"],"names":["Header","className","href","target","icon","faCodeBranch","size","useAppDispatch","useDispatch","useAppSelector","useSelector","LocationAdditionalInfo","selectedLocation","name","address","website","MapComponent","withScriptjs","withGoogleMap","props","defaultZoom","center","lat","lng","position","LocationDetails","state","googleMapURL","process","loadingElement","style","height","containerElement","mapElement","faMapMarkedAlt","color","opacity","BASE_URL","SEARCH_LOCATIONS_URL","GET_NEW_LOCATION_URL","GET_LOCATION_FROM_DB_URL","getLocationsFromDb","a","fetch","res","json","data","locations","console","log","searchNewLocation","value","predictions","map","buildPredictionsObj","getNewLocationFromSearch","id","location","buildLocationObj","place_id","formatted_address","geometry","description","SET_LOCATIONS","ADD_LOCATION","REMOVE_LOCATION","SET_ACTIVE_LOCATION","DEACTIVATE_LOCATION","UPDATE_SEARCH_RESULTS","setLocations","type","payload","addLocation","serverAddLocation","searchLocation","searchTerm","dispatch","then","updateSearchResults","setActiveLocation","locationId","LocationItem","selectedLocationId","isSelected","onClick","ev","stopPropagation","serverRemoveLocation","LocationList","locationsList","LocationSearch","handleToggleLocationSearch","useState","searchInput","updateSearchInput","searchResults","useEffect","debouncedSearch","useCallback","debounce","handleResult","onChange","length","result","suggestion","handleClick","MenuButton","isLocationSearch","onButtonClick","handleButtonClick","bool","App","toggleLocationSearch","firstLocationId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","filterWithId","idToMatch","initialState","socket","io","socketIoMiddleware","createSocketIoMiddleware","store","createStore","action","newLocation","locationToRemove","updatedLocations","filter","find","clonedLocations","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9c1f848.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCodeBranch } from '@fortawesome/free-solid-svg-icons';\r\nimport './header.scss';\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header className='app-header'>\r\n      <h2>Locations App</h2>\r\n      <a href='https://github.com/sggv950/wix-editor-locations-app' target=\"_blank\">\r\n        <FontAwesomeIcon icon={faCodeBranch} size='lg' />\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import React from 'react';\r\nimport { Location } from '../../store/reducer';\r\nimport './location-additional-info.scss';\r\n\r\nexport type SelectedLocationProps = {\r\n  selectedLocation: Location;\r\n}\r\n\r\nexport const LocationAdditionalInfo = ({selectedLocation}: SelectedLocationProps) => {\r\n  const { name, address, website } = selectedLocation;\r\n\r\n  return (\r\n    <div className='location-info-container'>\r\n      <strong>Location details:</strong>\r\n      <div className='location-info-text'>\r\n        <p>{name}</p>\r\n        {!!website && <strong><a href={website} target=\"_blank\">website</a></strong>}\r\n        <p><strong>address:</strong> {address}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import './map-component.scss';\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from 'react-google-maps';\r\n\r\nexport const MapComponent = withScriptjs(\r\n  withGoogleMap((props: any) => {\r\n\r\n    return (\r\n      <GoogleMap defaultZoom={13} center={{ lat: (+props.lat), lng: (+props.lng) }}>\r\n        <Marker position={{ lat: (+props.lat), lng: (+props.lng) }} />\r\n      </GoogleMap>\r\n    );\r\n  })\r\n);\r\n","import { faMapMarkedAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { LocationAdditionalInfo } from '../location-additional-info/LocationAdditionalInfo';\r\nimport { MapComponent } from '../map-component/MapComponent';\r\nimport './location-details.scss';\r\nconst { REACT_APP_MAPS_API } = process.env;\r\n\r\nexport const LocationDetails = () => {\r\n  const selectedLocation = useAppSelector(state => state.selectedLocation);\r\n\r\n  return (\r\n    <div className='location-details-container'>\r\n      {selectedLocation && (\r\n        <LocationAdditionalInfo selectedLocation={selectedLocation} />\r\n      )}\r\n      {selectedLocation && <MapComponent\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${REACT_APP_MAPS_API}&v=3.exp&libraries=geometry,drawing,places`}\r\n        loadingElement={<div style={{ height: `100%` }} />}\r\n        containerElement={<div style={{ height: `100%` }} />}\r\n        mapElement={<div style={{ height: `100%` }} />}\r\n        lat={selectedLocation.lat} lng={selectedLocation.lng} />\r\n      }\r\n\r\n      {!selectedLocation && (\r\n        <div className='location-details-placeholder'>\r\n          <FontAwesomeIcon\r\n            icon={faMapMarkedAlt}\r\n            size='4x'\r\n            color='#20303c'\r\n            opacity='0.3'\r\n          />\r\n          <p>\r\n            looks like no location is active\r\n            <br />\r\n            add or pick one...\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","const BASE_URL = process.env.NODE_ENV === \"production\" ? \"/api\" : \"//localhost:5000/api\";\r\nconst SEARCH_LOCATIONS_URL = `${BASE_URL}/autocomplete`;\r\nconst GET_NEW_LOCATION_URL = `${BASE_URL}/place`;\r\nconst GET_LOCATION_FROM_DB_URL = `${BASE_URL}/locations`;\r\n\r\nexport type Prediction = {\r\n  id: string;\r\n  description: string;\r\n}\r\n\r\nexport const getLocationsFromDb = async () => {\r\n  try {\r\n    const res = await fetch(`${GET_LOCATION_FROM_DB_URL}`);\r\n    const data = await res.json();\r\n    const locations = data.locations;\r\n    return locations;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const searchNewLocation = async (value: string) => {\r\n  const res = await fetch(`${SEARCH_LOCATIONS_URL}/${value}`);\r\n  const data = await res.json();\r\n  const predictions = data.map(buildPredictionsObj);\r\n  return predictions;\r\n}\r\n\r\nexport const getNewLocationFromSearch = async (id: string) => {\r\n  const res = await fetch(`${GET_NEW_LOCATION_URL}/${id}`);\r\n  const data = await res.json();\r\n  const location = buildLocationObj(data);\r\n  return location;\r\n}\r\n\r\nfunction buildLocationObj(data: any) {\r\n  return {\r\n    id: data.place_id,\r\n    name: data.name,\r\n    address: data.formatted_address,\r\n    lat: `${data.geometry.location.lat}`,\r\n    lng: `${data.geometry.location.lng}`,\r\n    website: data.website\r\n  }\r\n}\r\n\r\nfunction buildPredictionsObj(data: any) {\r\n  return {\r\n    id: data.place_id,\r\n    description: data.description\r\n  }\r\n}","import {\r\n  getLocationsFromDb,\r\n  Prediction,\r\n  searchNewLocation,\r\n} from '../api/locations-service';\r\nimport { Location } from './reducer';\r\n\r\nexport const SET_LOCATIONS = 'SET_LOCATIONS';\r\nexport const ADD_LOCATION = 'ADD_LOCATION';\r\nexport const SERVER_ADD_LOCATION = 'server/add';\r\nexport const REMOVE_LOCATION = 'REMOVE_LOCATION';\r\nexport const SERVER_REMOVE_LOCATION = 'server/remove';\r\nexport const SET_ACTIVE_LOCATION = 'SET_ACTIVE_LOCATION';\r\nexport const DEACTIVATE_LOCATION = 'DEACTIVATE_LOCATION';\r\nexport const UPDATE_SEARCH_RESULTS = 'UPDATE_SEARCH_RESULTS';\r\n\r\nexport type NewLocationData = string;\r\nexport type LocationId = string;\r\n\r\nexport type LocationsAction =\r\n  | { type: 'SET_LOCATIONS'; payload: Location[] }\r\n  | { type: 'ADD_LOCATION'; payload: Location }\r\n  | { type: 'server/add'; payload: Location }\r\n  | { type: 'REMOVE_LOCATION'; payload: LocationId }\r\n  | { type: 'server/remove'; payload: LocationId }\r\n  | { type: 'SET_ACTIVE_LOCATION'; payload: LocationId }\r\n  | { type: 'DEACTIVATE_LOCATION' }\r\n  | { type: 'UPDATE_SEARCH_RESULTS'; payload: Location[] | [] }\r\n  | any\r\n\r\nexport const getLocations = () => (dispatch: any) => {\r\n  getLocationsFromDb().then((locations: Location[]) => {\r\n    const firstLocationId = locations[0]['id'] || '';\r\n    dispatch(setLocations(locations));\r\n    dispatch(setActiveLocation(firstLocationId));\r\n  });\r\n};\r\nexport const setLocations = (locations: Location[]): LocationsAction => ({\r\n  type: SET_LOCATIONS,\r\n  payload: locations,\r\n});\r\n\r\nexport const addLocation = (location: Location): LocationsAction | undefined => ({\r\n  type: ADD_LOCATION,\r\n  payload: location,\r\n});\r\n\r\nexport const serverAddLocation = (location: Location): LocationsAction => ({\r\n  type: SERVER_ADD_LOCATION,\r\n  payload: location,\r\n});\r\n\r\nexport const removeLocation = (locationId: LocationId): LocationsAction => ({\r\n  type: REMOVE_LOCATION,\r\n  payload: locationId,\r\n});\r\n\r\nexport const serverRemoveLocation = (\r\n  locationId: LocationId\r\n): LocationsAction => ({\r\n  type: SERVER_REMOVE_LOCATION,\r\n  payload: locationId,\r\n});\r\n\r\nexport const searchLocation = (searchTerm: string) => (dispatch: any) => {\r\n  searchNewLocation(searchTerm).then((locations: Prediction[]) => {\r\n    dispatch(updateSearchResults(locations));\r\n  });\r\n};\r\nexport const updateSearchResults = (locations: Location[]) => ({\r\n  type: UPDATE_SEARCH_RESULTS,\r\n  payload: locations,\r\n});\r\n\r\nexport const setActiveLocation = (locationId: LocationId): LocationsAction => ({\r\n  type: SET_ACTIVE_LOCATION,\r\n  payload: locationId,\r\n});\r\n\r\nexport const deactivateLocation = (): LocationsAction => ({\r\n  type: DEACTIVATE_LOCATION,\r\n});\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { useAppDispatch } from '../../store/hooks';\r\nimport { deactivateLocation, removeLocation, serverRemoveLocation, setActiveLocation } from '../../store/actions';\r\nimport './location-item.scss';\r\nimport { Location } from '../../store/reducer';\r\n\r\nexport type LocationItemProps = {\r\n  location: Location;\r\n  selectedLocationId?: string;\r\n};\r\n\r\nexport const LocationItem = ({ location, selectedLocationId }: LocationItemProps) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { id, name, address } = location;\r\n  const isSelected = id === selectedLocationId;\r\n\r\n  const removeCurrentLocation = (ev: SyntheticEvent) => {\r\n    ev.stopPropagation();\r\n    if (isSelected) {\r\n      dispatch(deactivateLocation());\r\n    }\r\n    dispatch(removeLocation(id));\r\n    dispatch(serverRemoveLocation(id));\r\n  };\r\n  \r\n  const selectLocation = () => {\r\n    dispatch(setActiveLocation(id));\r\n  }\r\n\r\n  return (\r\n    <div className={`location-item-container ${ isSelected ? 'selected-location' : '' }`} onClick={selectLocation} >\r\n      <button className='remove-location-btn' onClick={removeCurrentLocation}>&times;</button>\r\n      <div className='location-item-name'>{name}</div>\r\n      <div className='location-item-address'>{address}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './location-list.scss';\r\nimport { LocationItem } from '../location-item/LocationItem';\r\nimport { useAppSelector } from '../../store/hooks';\r\n\r\n// export type LocationListProps = {\r\n//   locations: LocationItemType[]\r\n// }\r\n\r\nexport const LocationList = () => {\r\n  const locations = useAppSelector(state => state.locationsList);\r\n  const selectedLocation = useAppSelector(state => state.selectedLocation);\r\n  const selectedLocationId = selectedLocation ? selectedLocation.id : '';\r\n\r\n  return (\r\n    <div className='location-list-container'>\r\n      {locations.map(location => (\r\n        <LocationItem\r\n          location={location}\r\n          selectedLocationId={selectedLocationId}\r\n          key={location.id}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { SyntheticEvent, useCallback, useEffect, useState } from 'react';\r\nimport debounce from 'lodash.debounce';\r\nimport './location-search.scss';\r\nimport { getNewLocationFromSearch, Prediction } from '../../api/locations-service';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { addLocation, searchLocation, serverAddLocation, setActiveLocation, updateSearchResults } from '../../store/actions';\r\n\r\nexport type LocationSearchProps = {\r\n  handleToggleLocationSearch: (bool: boolean) => void\r\n}\r\n\r\ntype HandleClick = (id: string) => void;\r\n\r\nconst searchResult = (suggestion: Prediction, handleClick: HandleClick) => {\r\n  return (\r\n    <li\r\n      key={suggestion.id}\r\n      onClick={() => handleClick(suggestion.id)}\r\n      className='location-search-results-item'\r\n    >\r\n      {suggestion.description}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport const LocationSearch = ({handleToggleLocationSearch}: LocationSearchProps) => {\r\n  const [searchInput, updateSearchInput] = useState('');\r\n  const searchResults = useAppSelector(state => state.searchResults);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(updateSearchResults([]));\r\n  }, [])\r\n\r\n  const debouncedSearch = useCallback(\r\n    debounce(async (value: string) => {\r\n      if (value) {\r\n        dispatch(searchLocation(value))\r\n      } else {\r\n        dispatch(updateSearchResults([]));\r\n      }\r\n    }, 1000),\r\n    []\r\n  );\r\n\r\n  const handleResult = async (id: string) => {\r\n    const location = await getNewLocationFromSearch(id);\r\n    dispatch(addLocation(location));\r\n    dispatch(setActiveLocation(id));\r\n    dispatch(serverAddLocation(location));\r\n    handleToggleLocationSearch(false);\r\n  };\r\n\r\n  const handleSearchInput = (ev: SyntheticEvent) => {\r\n    const value = (ev.target as HTMLInputElement).value;\r\n    updateSearchInput(value);\r\n    debouncedSearch(value);\r\n  };\r\n\r\n  return (\r\n    <div className='location-search-container'>\r\n      <p className='location-search-title'>Search for location:</p>\r\n      <input\r\n        className='location-search-input'\r\n        value={searchInput}\r\n        onChange={handleSearchInput}\r\n        type='text'\r\n      />\r\n      <div className='location-search-results'>\r\n        <ul className='location-search-results-list'>\r\n          {!!searchResults.length &&\r\n            searchResults.map(result => searchResult(result, handleResult))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import './menu-button.scss';\r\n\r\nexport type MenuButtonType = {\r\n  isLocationSearch: boolean;\r\n  onButtonClick: (bool: boolean) => void;\r\n};\r\n\r\nexport const MenuButton = ({\r\n  isLocationSearch,\r\n  onButtonClick,\r\n}: MenuButtonType) => {\r\n  const handleButtonClick = (bool: boolean) => {\r\n    return onButtonClick(bool);\r\n  };\r\n\r\n  return (\r\n    <div className='buttons-container'>\r\n      {isLocationSearch ? (\r\n        <button\r\n          onClick={() => handleButtonClick(false)}\r\n          className='menu-btn close-btn'\r\n        >\r\n          Back\r\n        </button>\r\n      ) : (\r\n        <button\r\n          onClick={() => handleButtonClick(true)}\r\n          className='menu-btn add-location-btn'\r\n        >\r\n          + Add location\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { Header } from './components/header/Header';\nimport { LocationDetails } from './components/location-details/LocationDetails';\nimport { LocationList } from './components/location-list/LocationList';\nimport { LocationSearch } from './components/location-search/LocationSearch';\nimport { MenuButton } from './components/menu-button/MenuButton';\nimport { getLocations } from './store/actions';\nimport { useAppDispatch } from './store/hooks';\n\nfunction App() {\n  const [isLocationSearch, toggleLocationSearch] = useState(false);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(getLocations())\n  }, [])\n  \n  return (\n    <div className='app'>\n      <Header />\n      <MenuButton\n        isLocationSearch={isLocationSearch}\n        onButtonClick={toggleLocationSearch}\n      />\n      {!isLocationSearch && <LocationList />}\n      {isLocationSearch && <LocationSearch handleToggleLocationSearch={toggleLocationSearch}/>}\n      <LocationDetails />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const filterWithId = (idToMatch: string) => (id: string): boolean => idToMatch !== id;","// import { combineReducers } from 'redux';\r\nimport { Prediction } from '../api/locations-service';\r\nimport { filterWithId } from '../utils/util';\r\nimport {\r\n  ADD_LOCATION,\r\n  LocationsAction,\r\n  REMOVE_LOCATION,\r\n  SET_ACTIVE_LOCATION,\r\n  DEACTIVATE_LOCATION,\r\n  SET_LOCATIONS,\r\n  UPDATE_SEARCH_RESULTS,\r\n} from './actions';\r\n\r\nexport type Location = {\r\n  name?: string;\r\n  id: string;\r\n  lat?: string;\r\n  lng?: string;\r\n  address?: string;\r\n  website?: string;\r\n};\r\n\r\nexport interface LocationsState {\r\n  locationsList: Location[];\r\n  selectedLocation: Location | null;\r\n  searchResults: Prediction[];\r\n}\r\n\r\nexport const initialState: LocationsState = {\r\n  locationsList: [],\r\n  selectedLocation: null,\r\n  searchResults: [],\r\n};\r\n\r\nexport const reducer = (\r\n  state = initialState,\r\n  action: LocationsAction\r\n): LocationsState => {\r\n  if (action.type === SET_LOCATIONS) {\r\n    return { ...state, locationsList: [...action.payload] };\r\n  }\r\n\r\n  if (action.type === ADD_LOCATION) {\r\n    const newLocation = {\r\n      ...action.payload,\r\n    };\r\n    return { ...state, locationsList: [newLocation, ...state.locationsList] };\r\n  }\r\n\r\n  if (action.type === REMOVE_LOCATION) {\r\n    const locationToRemove = filterWithId(action.payload);\r\n    const updatedLocations = state.locationsList.filter(location =>\r\n      locationToRemove(location.id)\r\n    );\r\n    const selectedLocation =\r\n      updatedLocations.find(\r\n        location => location.id === state.selectedLocation?.id\r\n      ) || null;\r\n    return { ...state, selectedLocation, locationsList: updatedLocations };\r\n  }\r\n\r\n  if (action.type === UPDATE_SEARCH_RESULTS) {\r\n    const searchResults = action.payload;\r\n    return { ...state, searchResults };\r\n  }\r\n\r\n  if (action.type === SET_ACTIVE_LOCATION) {\r\n    const clonedLocations = [...state.locationsList];\r\n    const selectedLocation =\r\n      clonedLocations.find(location => location.id === action.payload) || null;\r\n    return { ...state, selectedLocation };\r\n  }\r\n  if (action.type === DEACTIVATE_LOCATION) {\r\n    const selectedLocation = null;\r\n    return { ...state, selectedLocation };\r\n  }\r\n\r\n  return state;\r\n};\r\n","import thunk from 'redux-thunk';\r\nimport io from 'socket.io-client';\r\nimport createSocketIoMiddleware from 'redux-socket.io';\r\nimport { applyMiddleware, compose, createStore } from \"redux\";\r\nimport { reducer } from \"./reducer\";\r\nlet socket = io();\r\nlet socketIoMiddleware = createSocketIoMiddleware(socket, \"server/\");\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nexport const store = createStore(reducer, applyMiddleware(socketIoMiddleware, thunk));\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}